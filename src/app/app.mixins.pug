mixin input({name, errors = {}, type, placeholder, label})
  - errCondition = "['dirty', 'touched']"

  // this mixin handles errors
  mixin handle-form-group()
    - fieldError = name + "Errors"
    - attributes["#" + fieldError] = "ngxErrors";
    .form-group.has-feedback([class.has-error]=`${fieldError}.hasError('*', ${errCondition})`)
      block
      span(ngxErrors=name)&attributes(attributes)
        each errorKey in Object.keys(errors)
          if errorKey in ["*", "any"]
            +handle-any-error(fieldError)
          else
            small(ngxError=errorKey, [when]!=errCondition)
              | #{errors[errorKey]}

  //
   * Show the any Error only if a message for the current error isn't specified
   * for example if the errors are {required: 'something', any: 'something Else'}
   * This wil only show the any error if the error is anything but required
   */
  mixin handle-any-error(fieldError)
    - hideAnyError = ""
    each errorKey in Object.keys(errors)
      if ! errorKey in ["*", "any"]
        - hideAnyError += `${fieldError}.hasError('${errorKey}')`
    span([hidden]=hideAnyError)
      small([hidden]=`! ${fieldError}.hasErrors `)
        | #{errors['*']}

  mixin handle-input()
    - prettyName = name.replace(/([A-Z])/g, ' $1')
    - prettyName = prettyName.charAt(0).toUpperCase() + prettyName.slice(1)
    - placeholder = placeholder || prettyName
    if /(email|Email)/.test(name)
      - type = type || "email"
    if /(password|Password)/.test(name)
      - type = type || "password"
    else
      - type = type || "text"
    if !label
      input.form-control(placeholder=placeholder, type=type, name=name, formControlName=name)
    else
      label(for=name)
        | #{label}
      input.form-control(type=type, name=name, formControlName=name, placeholder=placeholder)

  +handle-form-group()
    +handle-input()

